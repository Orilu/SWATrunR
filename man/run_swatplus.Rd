% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/swatplus_run_swat.R
\name{run_swatplus}
\alias{run_swatplus}
\title{Run simulations for a SWAT+ project}
\usage{
run_swatplus(
  project_path,
  output,
  parameter = NULL,
  start_date = NULL,
  end_date = NULL,
  years_skip = NULL,
  start_date_print = NULL,
  run_index = NULL,
  run_path = NULL,
  n_thread = NULL,
  save_file = NULL,
  save_path = NULL,
  return_output = TRUE,
  add_parameter = TRUE,
  add_date = TRUE,
  refresh = TRUE,
  keep_folder = FALSE,
  quiet = FALSE,
  time_out = Inf
)
}
\arguments{
\item{project_path}{Path to the SWAT project folder on the hard drive
(i.e. txtinout folder).}

\item{output}{Output variables to extract and return for each SWAT model run.

Each output variable which should be returned is defined with \code{\link{define_output}}.
If multiple output variables should be returned for a model run, the output
definitions must be concatenated in a named list. See the examples in the
section below and on the help page of \code{\link{define_output}}.}

\item{parameter}{(optional) Model parameter changes to be implemented in the
simulation runs.

Parameter changes can be defined by providing a named vector with the
changes for a single parameter combination or a tibble where each row is
a parameter combinantion which should be used in a model simulation.

For examples of the implementation of parameter changes in model simulations
see the
\href{https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html#changing-parameter-values}{\code{SWATrunR}}
github page and the examples in corresponding section below.}

\item{start_date, end_date}{(optional) Start and end dates of the SWAT simulation.

Start and end dates have to be defined together. Default values are
\code{NULL}. In this case the start and end dates which are defined in file
'time.sim' of the SWAT+ project are used in the simulation runs.

The dates can be provided as character strings in any ymd format
(e.g. 'yyyy-mm-dd'), as numeric values (yyyymmdd) or in a \code{Date}
format.}

\item{years_skip, start_date_print}{(optional) Start year/date for output printing.

\code{years_skip} or \code{start_date_print} can be used to define the start year/date
in which the first simulation outputs should be written. The two arguments
are useful to define a 'warm-up' period for the simulation runs for which
the simulation results are not considered.

\code{years_skip} is provided as an integer value which defines the number of
years to skip before writing outputs.

\code{start_date_print} can be provided as character string in any ymd format
(e.g. 'yyyy-mm-dd'), as a numeric value (yyyymmdd) or in a \code{Date}
format.

For the simulation of hydrological years (which do not start at Jan 1.)
the use of \code{start_date_print} is the preferred option to define the actual
start date of the hydrological year (e.g. '2000-10-01').

\code{start_date_print} is always overruled by the definition of \code{years_skip}.

The default values of \code{years_skip} and \code{start_date_print} are \code{NULL}.
If both are \code{NULL} the projects' default setting for output printing which
is defined in the input file 'print.prt' is used.}

\item{run_index}{(optional) Vector of IDs of parameter combinations for which
simulations should be performed.

\code{run_index} is useful to only perform a subset of simulations for a defined
parameter set (e.g. when distributing simulations between several computers,
or when rerunning failed simulations for certain parameter combinations).

\code{run_index} is defined as a numeric vector where the values correspond to
the row IDs of the parameter input table. (e.g.\code{run_index = c(1:100,
  110, 115)}). The default value is \code{NULL}. Then the simulations for all
provided parameter combinations are performed.}

\item{run_path}{(optional) Path to a location where the simulations should be
performed.

\code{run_path} is useful if the project folder (in \code{project_path}) is in a
location where the simulations should not be performed (e.g. because of
limited space, or a virtual or slow drive). In such a case it can help to
perform the simulations on a different hard drive (e.g. local drive).

In the path which is defined with \code{run_path} the folder '.model_run' is
generated and the SWAT project is copied there into a number of sub-folders
'thread_\if{html}{\out{<i>}}', depending on the number of parallel runs which were defined.

With the default value of \code{run_path = NULL} the folder '.model_run' is
generated in the \code{project_path}.}

\item{n_thread}{(optional) Number parallel threads in which the simulations
are performed. Default \code{n_thread} is \code{NULL} and all simulations are run in
the folder '.model_run/thread_1' and on a single core. If \code{n_thread} is
defined with a number greater than 1 multiple thread folders are generated
and the simulations are performed in parallel on that number of cores.
\code{n_thread} is always limited by the number of cores of the used computer.}

\item{save_file}{(optional) Name of the folder where simulation runs should be
saved incrementally.

If a \code{save_file} is provided a folder with that name is generated and the
simulation results are incrementally saved in several SQLite data bases in
the folder. This option is useful when very long simulation experiments are
performed and computer/simulation crashes may result in the loss of days or
weeks of simulation runs, or when simulation outputs are returned which
would not fit into the computers RAM.

Default is \code{NULL} and simulations are not saved incrementally.}

\item{save_path}{(optional) Path where the \code{save_file} folder should be
generated.

In the default case \code{save_path = NULL} the \code{save_file} folder is generated
in the \code{project_path}. If a \code{save_path} is provided the \code{save_file} folder
is generated there if \code{save_file} in not \code{NULL}.}

\item{return_output}{(optional) Return outputs in \code{R}. If \code{TRUE} (default
value) then the defined simulated output variables are returned at the end
of all simulation runs. If \code{FALSE} no simulations are returned in \code{R}.

\strong{Caution:} Please only set \code{return_output = FALSE} if the simulations are
saved in a \code{save_file}. Otherwise the simulations are performed but no
simulations are returned.}

\item{add_parameter}{(optional)  Add the used parameter changes in the
simulation outputs. If \code{TRUE} (default value and recommended) the returned
list with the simulation outputs includes the list element \code{.$parameter}
which provides the definition of the parameters \code{.$parameter$definition}
and the values of the parameter changes \code{.$parameter$values}}

\item{add_date}{(optional) Add a date vector to simulated time series. If
\code{TRUE} (default value) a date vector is added.}

\item{refresh}{(optional) Rewrite existing '.model_run' folder. If \code{TRUE}
(default value and recommended) always forces that .model_run' is newly
written when SWAT run ins started.}

\item{keep_folder}{(optional) Keep the thread folders in '.model_run' after
finishing the simulation runs. If \code{FALSE} (default value) the '.model_run'
folder is deleted after the last simulation. Keeping the thread folders
(\code{keep_folder = TRUE}) can be useful to manually check input and output
files in the thread folders after the simulation.}

\item{quiet}{(optional) Printing the progress of the simulations. If
\code{TRUE} (default value) the progress of the simulation runs is printed in the
console.}

\item{time_out}{(optional) Timeout for simulation runs in seconds.

Simulations may hang up due to specific parameter combinations. A timeout
kills any simulation if the run time exceeds the set time in seconds.
Be careful with this setting. A timeout which is set shorter than the
actual run time of a simulation will also kill all potentially successful
runs before finishing.

Default \code{time_out} is set to \code{Inf} to not kill any simulations.}
}
\value{
Returns the simulation results for the defined output variables as a
tibble. If more than one parameter set was provided a list of tibbles is
returned where each column is a model run and each list entry is an output
variable.
}
\description{
\code{run_swatplus()} performs simulations for a SWAT+ model setup that is located
in the folder \code{project_path} and returns simulated output variables which are
defined with \code{output} in a tidy format. Optionally, a set of parameter changes
can be defined with \code{parameter} which are then applied in the simulation runs.

Several settings such as the definition of the simulation period, incremental
saving of simulation results into SQLite data bases, or the use of multiple
cores for the simulation runs can be defined.
}
\section{Examples for output definition}{


Outputs are defined with the function \code{define_output()}. The function has the
three input arguments \code{file} which defines the output file into which the
variable of interest is written, \code{variable} which is the variable name as it is
defined in the output file (without the unit), and \code{unit} which is the spatial
unit for which the variable is extracted (e.g. channel ID, or HRU, etc., but
also the crop names in the case of management outputs).

The following examples show definitions for output variables. In a simulation
run with \code{run_swatplus()} these definitions must be passed with the input
argument \code{output}.

A single output variable can be defined like in the following examples:

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Define monthly basin wide ET
# Basin ET is in written to basin_wb.
# The definition of the time interval with the file name is required (here 'mon').
define_output(file = 'basin_wb_mon',
              variable = 'et', # This is the variable name in the file.
              unit = 1 # Basin output have unit = 1 as there is 1 basin
              )

# Define daily 'flo_out' for the channels 1 to 3 and 7
# Channel outputs can be extracted either from 'channel_sd' or 'channel_sdmorph'.
 define_output(file = 'channel_sdmorph_day',
               variable = 'flo_out',
               unit = c(1:3, 7) # To define the channel IDs of interest.
              )
}\if{html}{\out{</div>}}

More than one variable must be defined in a named list. The name of each
output definition is then assigned to the returned outputs together with the
unit ID if more than one ID was defined. \code{SWATrunR} > 1.0.0 allows to return
outputs with different output intervals at the same time. Further non-time
series outputs such as flow duration curve (FDC) outputs, average annual crop
yields, and annual management outputs such as crop yields, biomass, or growth
stress factors can also be returned now.

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Define the outputs for
# - Average annual ET for the HRUs 1 to 847
# - Channel discharge for the channels 1, 34, and 57
# - FDC outputs for the channels 1, 34, and 57
# - Average annual crop yields
# - HRU and year specific crop yields for 'corn' and 'pnut'
#
list(et_hru  = define_output('hru_wb_aa', 'et', 1:847),
     cha_q   = define_output('channel_sd_day', 'flo_out', c(1, 34, 57)),
     fdc     = define_output(file = 'fdcout', unit = c(1, 34, 57)),
     yld_aa  = define_output('basin_crop_yld_aa', 'yld'),
     yld_mgt = define_output('mgtout', 'yld', c('corn', 'pnut')))
}\if{html}{\out{</div>}}
}

\section{Examples for parameter definition}{


The definition of parameter changes follows a strict syntax in the parameter
names which have to be assigned to the change values. Therefore it is highly
recommended to read the corresponding section on the
\href{https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html#changing-parameter-values}{\code{SWATrunR}}
github page. The following examples show very basic parameter definitions and
do not cover specific naming of parameters, or parameter conditions which are
topics covered on the github page.

In a nutshell the name definition of a parameter requires at least the name
of the parameter how it is defined in the calibration.cal input file, the
file suffix, and the type of change, as shown in this example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Change cn2 by -5\% and alpha by an absolute value of 0.35
par_condplus <- c("cn2.hru | change = relchg" = - 0.05,
"                 "alpha.aqu | change = absval" = 0.35)
}\if{html}{\out{</div>}}

As shown in the example above, single parameter changes can be passed as a
named vector. Multiple parameter combinations must be passed in a tibble
(caution here, base R data.frames might not be able to handle all special
characters in the parameter names). Below an example for a more comprehensive
parameter set with uniform randomly sampled parameter changes:

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Draw 100 samples for each parameter
n <- 100

# Sample each parameter change uniformly n times in their upper/lower bounds
par_set <- tibble('cn2.hru | change = abschg' = runif(n,-15,10),
                  'lat_ttime.hru | change = absval' = runif(n,0.5,5),
                  'lat_len.hru | change = abschg' = runif(n,-10,50),
                  'epco.hru | change = absval' = runif(n,0.1,1),
                  'esco.hru | change = absval' = runif(n,0.1,1),
                  'perco.hru | change = absval' = runif(n,0.1,0.8),
                  'k.sol | change = pctchg' = runif(n,-20,100),
                  'awc.sol | change = pctchg' = runif(n,-20,20),
                  'alpha.aqu | change = absval' = runif(n,0.1,0.8))
}\if{html}{\out{</div>}}
}

\section{Examples}{

To learn the basics on how to use \code{SWATplusR} see the
\href{https://chrisschuerz.github.io/SWATplusR/articles/SWATplusR.html#first-swat-model-runs}{Get started}
page on the package's github page.
}

